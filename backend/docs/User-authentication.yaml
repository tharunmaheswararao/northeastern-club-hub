openapi: 3.1.0
info:
  title: Northeastern Club Hub API - User Authentication and Roles Management
  description: API endpoints for managing user authentication, roles, and account verification.
  version: 1.0.0
servers:
  - url: http://localhost:3002
    description: Local development environment
paths:
  /api/users/register:
    post:
      summary: Register a new user (student or club admin)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - email
                - password
                - role
              properties:
                username:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
                role:
                  type: string
                  enum: [student, clubAdmin]
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: string
                  username:
                    type: string
                  role:
                    type: string
                  status:
                    type: string
                    description: Indicates if the account is pending approval or active (only for club admins)
                    examples: ["pending"]
        '400':
          description: Bad Request - Missing or invalid fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/users/login:
    post:
      summary: Login a user and return a JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        '200':
          description: Login successful, returns JWT token
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  userId:
                    type: string
                  role:
                    type: string
        '401':
          description: Unauthorized - Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/users/{userId}:
    get:
      summary: Retrieve user profile by user ID
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: string
                  username:
                    type: string
                  email:
                    type: string
                  role:
                    type: string
                  status:
                    type: string
                    description: Account status (active or pending)
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/users/verify/{userId}:
    put:
      summary: Verify and approve a club admin account (platform admin only)
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [active, pending, rejected]
                  description: Updated status for the club admin account
      responses:
        '200':
          description: Account status updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: string
                  status:
                    type: string
                    examples: ["active"]
        '401':
          description: Unauthorized - Admin privileges required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    Error:
      type: object
      properties:
        code:
          type: string
          examples: ["ERR_401"]
        message:
          type: string
          examples: ["Unauthorized access"]

    User:
      type: object
      properties:
        userId:
          type: string
        username:
          type: string
        email:
          type: string
        role:
          type: string
          enum: [student, clubAdmin, platformAdmin]
        status:
          type: string
          examples: ["pending"]
